Table users {
  id int [pk, increment]
  name varchar(100)
  email varchar(100) [unique]
  password varchar(100)
  role varchar(20) // admin, organizer, customer
  phone_number varchar(15)
  profile_image varchar(255)
  created_at timestamp
}

Table categories {
  id int [pk, increment]
  name varchar(50)
  created_at timestamp
}

Table events {
  id int [pk, increment]
  category_id int [ref: > categories.id]
  name varchar(100)
  description text
  start_date datetime
  end_date datetime
  location varchar(100)
  organizer_id int [ref: > users.id]
  event_image varchar(255)
  status varchar(20) // draft, published, cancelled, completed
  max_tickets int
  created_at timestamp
}

Table ticket_types {
  id int [pk, increment]
  event_id int [ref: > events.id]
  name varchar(50) // Regular, VIP, VVIP
  price decimal(10, 2)
  quota int
  benefits text // List of benefits for this ticket type
  created_at timestamp

  indexes {
    (event_id, name) [unique]
  }
}

Table bookings {
  id int [pk, increment]
  user_id int [ref: > users.id]
  event_id int [ref: > events.id]
  total_amount decimal(10, 2)
  payment_status varchar(20) // pending, paid, cancelled, refunded
  payment_proof varchar(255)
  created_at timestamp
}

Table tickets {
  id int [pk, increment]
  booking_id int [ref: > bookings.id]
  ticket_type_id int [ref: > ticket_types.id]
  ticket_code varchar(50) [unique] // Unique code for each ticket
  is_used boolean // To track if ticket has been used
  created_at timestamp
}

Table reviews {
  id int [pk, increment]
  user_id int [ref: > users.id]
  event_id int [ref: > events.id]
  rating int [note: '1-5 scale']
  comment text
  created_at timestamp

  indexes {
    (user_id, event_id) [unique] // One review per user per event
  }
}
